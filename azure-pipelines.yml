# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  name: TradeMetrics-Build

strategy:
  matrix:
    Python37:
      PYTHON_VERSION: '3.7'
  maxParallel: 3

variables:
  DEBIAN_FRONTEND: 'noninteractive'

steps:

- script: |
    DEBIAN_FRONTEND=noninteractive apt update
    DEBIAN_FRONTEND=noninteractive apt install -y wget bzip2
    wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash Miniconda3-latest-Linux-x86_64.sh -b
    source $HOME/miniconda3/bin/activate
    conda env update -q -f server/environment.yml > /dev/null
    source /home/vsts/miniconda3/etc/profile.d/conda.sh
    conda activate
    python -m pip install --upgrade pip setuptools wheel
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd 'server'
    source /home/vsts/miniconda3/etc/profile.d/conda.sh
    conda activate
    #python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
    pytest -vv
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/test-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()

- task: PublishCodeCoverageResults@1
  inputs:
    # pytest-cov creates a coverage.xml file in the same format as Cobertura.
    codeCoverageTool: Cobertura
    summaryFileLocation: '**/coverage.xml'
    reportDirectory: '**/htmlcov'
  condition: succeededOrFailed()
