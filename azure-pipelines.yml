# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  vmImage: 'ubuntu-16.04'
strategy:
  matrix:
    #Python35:
    #  PYTHON_VERSION: '3.5'
    Python37:
      PYTHON_VERSION: '3.7'
  maxParallel: 3

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'

- script: |
    echo "Just a placeholder for testing conditions"
  displayName: "Expected skipping"
  condition: |
    and(
      succeededOrFailed(),
      or(
        False,
        0,
        in(variables['Build.SourceBranchName'], 'fifteen', 'sixteen'),
        startsWith(variables['Build.SourceBranchName'], 'one'),
        startsWith(variables['Build.SourceBranchName'], 'two'),
        startsWith(variables['Build.SourceBranchName'], 'three'),
        startsWith(variables['Build.SourceBranchName'], 'four')
      )
    )

- script: |
    echo "Just a placeholder for testing conditions"
  displayName: "Expected processing"
  condition: |
    and(
      succeededOrFailed(),
      or(
        False,
        0,
        in(variables['Build.SourceBranchName'], 'fifteen', 'sixteen', 'seventeen eighteen nineteen'),
        startsWith(variables['Build.SourceBranchName'], 'one'),
        startsWith(variables['Build.SourceBranchName'], 'two'),
        startsWith(variables['Build.SourceBranchName'], 'three'),
        startsWith(variables['Build.SourceBranchName'], 'master')
      )
    )


- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))
  condition: |
    and(
      succeededOrFailed(),
      or(
        False,
        0,
        True
      )
    )

- script: |
    python -m pip install --upgrade pip setuptools wheel
    pip install -r requirements.txt
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'
  condition: |
    and(
      succeededOrFailed(),
      or(
        False,
        0,
        True
      )
    )

- script: |
    pushd '$(projectRoot)'
    python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/TEST-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: |
    and(
      succeededOrFailed(),
      or(
        False,
        0,
        False
      )
    )
