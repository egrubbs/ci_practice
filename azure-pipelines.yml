# Python Django
# Test a Django project on multiple versions of Python.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger:
- master

pool:
  name: TradeMetrics-Build
strategy:
  matrix:
    Python37:
      PYTHON_VERSION: '3.7'
  maxParallel: 3

variables:
  DEBIAN_FRONTEND: 'noninteractive'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(PYTHON_VERSION)'
    architecture: 'x64'

- task: PythonScript@0
  displayName: 'Export project path'
  inputs:
    scriptSource: 'inline'
    script: |
      """Search all subdirectories for `manage.py`."""
      from glob import iglob
      from os import path
      # Python >= 3.5
      manage_py = next(iglob(path.join('**', 'manage.py'), recursive=True), None)
      if not manage_py:
          raise SystemExit('Could not find a Django project')
      project_location = path.dirname(path.abspath(manage_py))
      print('Found Django project in', project_location)
      print('##vso[task.setvariable variable=projectRoot]{}'.format(project_location))

- script: |
    DEBIAN_FRONTEND=noninteractive sudo apt install -y wget
    wget -q https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    bash Miniconda3-latest-Linux-x86_64.sh -b
    source $HOME/miniconda3/bin/activate
    conda env update -q -f server/environment.yml > /dev/null
    source /home/vsts/miniconda3/etc/profile.d/conda.sh
    conda activate
    python -m pip install --upgrade pip setuptools wheel
    pip install unittest-xml-reporting
  displayName: 'Install prerequisites'

- script: |
    pushd '$(projectRoot)'
    source /home/vsts/miniconda3/etc/profile.d/conda.sh
    conda activate
    #python manage.py test --testrunner xmlrunner.extra.djangotestrunner.XMLTestRunner --no-input
    pytest -vv
  displayName: 'Run tests'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: "**/test-*.xml"
    testRunTitle: 'Python $(PYTHON_VERSION)'
  condition: succeededOrFailed()

- task: PublishCodeCoverageResults@1
  inputs:
    # pytest-cov creates a coverage.xml file in the same format as Cobertura.
    codeCoverageTool: Cobertura
    summaryFileLocation: '**/coverage.xml'
    reportDirectory: '**/htmlcov'
  condition: succeededOrFailed()
